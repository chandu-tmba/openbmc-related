GetSubTree - Find all object paths and services that implement a specific interface.
Reference file : https://github.com/openbmc/docs/blob/master/architecture/object-mapper.md

paramaters used for calling function will be same as GetSubTreePaths but o/p will be different in this case.

command line example 
dbus-send --system --print-reply \
--dest=xyz.openbmc_project.ObjectMapper \
/xyz/openbmc_project/object_mapper \
xyz.openbmc_project.ObjectMapper.GetSubTree \
string:"/" int32:0 array:string:"xyz.openbmc_project.Sensor.Threshold.Warning"

crow::connections::systemBus->async_method_call(
            [asyncResp](
                const boost::system::error_code ec,
                const std::vector<std::pair<
                    std::string, std::vector<std::pair<
                                     std::string, std::vector<std::string>>>>>&
                    subtree) {
                if (ec)
                {
                    messages::internalError(asyncResp->res);
                    return;
                }


                for (auto& obj : subtree)
                {
                    // if can't parse fw id then return
                    std::size_t idPos;
                    if ((idPos = obj.first.rfind("/")) == std::string::npos)
                    {
                        messages::internalError(asyncResp->res);
                        BMCWEB_LOG_DEBUG << "Can't parse firmware ID!!";
                        return;
                    }
                    std::string swId = obj.first.substr(idPos + 1);
                    
                                      nlohmann::json& members =
                        asyncResp->res.jsonValue["Members"];
                    members.push_back(
                        {{"@odata.id", "/redfish/v1/UpdateService/"
                                       "FirmwareInventory/" +
                                           swId}});
                    asyncResp->res.jsonValue["Members@odata.count"] =
                        members.size();

                    asyncResp->res.addHeader(boost::beast::http::field::allow,
                                             redfish::Header::GetAllowHeaders("SoftwareInventoryCollection_v1.xml"));

                }
            },
    
            "xyz.openbmc_project.ObjectMapper",
            "/xyz/openbmc_project/object_mapper",
            "xyz.openbmc_project.ObjectMapper", "GetSubTree",
            "/xyz/openbmc_project/software", static_cast<int32_t>(0),
            std::array<const char*, 1>{"xyz.openbmc_project.Software.Version"});

we can also use this datatype , both are same only
const crow::openbmc_mapper::GetSubTreeType& subtree 

        crow::connections::systemBus->async_method_call(
            [self](const boost::system::error_code ec,
                   const crow::openbmc_mapper::GetSubTreeType& subtree) {

To get the  dbus object oath and service name , use following syntax
this subtree method  will return complex dat structure which of type      const std::vector<std::pair< std::string, std::vector<std::pair<std::string, std::vector<std::string>>>>>
We need to parse it accordingly to get all the dbus object paths and corresponding dbus service names

        // at the same time get the selected profile
        crow::connections::systemBus->async_method_call(
            [self](const boost::system::error_code ec,
                   const crow::openbmc_mapper::GetSubTreeType& subtree) {
                if (ec || subtree.empty())
                {
                    return;
                }
                if (subtree[0].second.size() != 1)
                {
                    // invalid mapper response, should never happen
                    BMCWEB_LOG_ERROR << "GetPIDValues: Mapper Error";
                    messages::internalError(self->asyncResp->res);
                    return;
                }

                const std::string& path = subtree[0].first; // dbus obj path
                const std::string& owner = subtree[0].second[0].first; // dbus service path 


